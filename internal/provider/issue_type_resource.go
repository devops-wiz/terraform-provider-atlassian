package provider

import (
	"context"
	"fmt"
	jira "github.com/ctreminiom/go-atlassian/v2/jira/v3"
	"github.com/hashicorp/terraform-plugin-framework-validators/int32validator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int32planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

var _ resource.Resource = (*issueTypeResource)(nil)
var _ resource.ResourceWithConfigure = (*issueTypeResource)(nil)
var _ resource.ResourceWithImportState = (*issueTypeResource)(nil)

func NewIssueTypeResource() resource.Resource {
	return &issueTypeResource{}
}

type issueTypeResource struct {
	client *jira.Client
}

func (r *issueTypeResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_issue_type"
}

func (r *issueTypeResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*jira.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *v3.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *issueTypeResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Manages a Jira issue type. Issue types are used to define the structure of different types of issues or work items in your Jira client.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				MarkdownDescription: "The unique identifier of the issue type. Automatically generated by Jira when the issue type is created.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The display name of the issue type. This appears in the issue creation dialog and issue views.",
			},
			"icon_url": schema.StringAttribute{
				MarkdownDescription: "The URL of the issue type's icon.",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "A detailed description of the issue type. This helps users understand the purpose and usage of this issue type.",
			},
			"subtask": schema.BoolAttribute{
				Computed:            true,
				MarkdownDescription: "Indicates whether this issue type is used for subtasks. When `true`, issues of this type can only be created as children of other issues.",
			},
			"avatar_id": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "The ID of the avatar for the issue type.",
			},
			"hierarchy_level": schema.Int32Attribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Int32{
					int32planmodifier.RequiresReplaceIfConfigured(),
				},
				Validators: []validator.Int32{
					int32validator.OneOf(0, -1),
				},
				MarkdownDescription: "The hierarchy level of the issue type, which defines its position in hierarchical structures. Typically `0` for regular issues and `1` for subtasks. Defaults to 0",
			},
		},
	}
}

func (r *issueTypeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	CreateResource(ctx, req, resp, &issueTypeResourceModel{}, r.client.Issue.Type.Create)
}

func (r *issueTypeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	ReadResource(ctx, req, resp, &issueTypeResourceModel{}, r.client.Issue.Type.Get)
}

func (r *issueTypeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	UpdateResource(ctx, req, resp, &issueTypeResourceModel{}, r.client.Issue.Type.Update)
}

func (r *issueTypeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	DeleteResource(ctx, req, resp, &issueTypeResourceModel{}, r.client.Issue.Type.Delete)
}

func (r *issueTypeResource) ImportState(ctx context.Context, request resource.ImportStateRequest, response *resource.ImportStateResponse) {
	ImportResource(ctx, request, response, &issueTypeResourceModel{}, r.client.Issue.Type.Get)
}
