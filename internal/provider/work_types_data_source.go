package provider

import (
	"context"
	"fmt"
	jira "github.com/ctreminiom/go-atlassian/v2/jira/v3"
	"github.com/ctreminiom/go-atlassian/v2/pkg/infra/models"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"slices"
	"strings"
)

var _ datasource.DataSource = (*workTypesDataSource)(nil)
var _ datasource.DataSourceWithConfigure = (*workTypesDataSource)(nil)

func NewWorkTypesDataSource() datasource.DataSource {
	return &workTypesDataSource{}
}

var emptyTypeModel = workTypeResourceModel{}

type workTypesDataSource struct {
	client *jira.Client
}

type workTypesDataSourceModel struct {
	Ids       types.List `tfsdk:"ids"`
	Names     types.List `tfsdk:"names"`
	WorkTypes types.Map  `tfsdk:"work_types"`
}

func (d *workTypesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_work_types"
}

func (d *workTypesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Use this data source to retrieve a list of work types from Jira.",
		Attributes: map[string]schema.Attribute{
			"ids": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Description: "The Ids of the work type to search. If not provided, all work types will be returned.",
				Validators: []validator.List{
					listvalidator.ConflictsWith(path.MatchRoot("names")),
				},
			},
			"names": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Description: "The name of the work type to search. If not provided, all work types will be returned.",
				Validators: []validator.List{
					listvalidator.ConflictsWith(path.MatchRoot("ids")),
				},
			},
			"work_types": schema.MapNestedAttribute{
				Computed:    true,
				Description: "List of work types returned by the query.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The unique identifier of the work type. Automatically generated by Jira when the work type is created.",
						},
						"name": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "The display name of the work type. This appears in the issue creation dialog and issue views.",
						},
						"icon_url": schema.StringAttribute{
							MarkdownDescription: "The URL of the work type's icon.",
							Computed:            true,
						},
						"description": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "A detailed description of the work type. This helps users understand the purpose and usage of this work type.",
						},
						"subtask": schema.BoolAttribute{
							Computed:            true,
							MarkdownDescription: "Indicates whether this work type is used for subtasks. When `true`, issues of this type can only be created as children of other issues.",
						},
						"avatar_id": schema.Int64Attribute{
							Computed:            true,
							MarkdownDescription: "The ID of the avatar for the work type.",
						},
						"hierarchy_level": schema.Int32Attribute{
							Optional:            true,
							Computed:            true,
							MarkdownDescription: hierarchyDescription,
						},
					},
				},
			},
		},
	}
}

func (d *workTypesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	provider, ok := req.ProviderData.(*JiraProvider)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected JiraProvider, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = provider.client
}

func (d *workTypesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data workTypesDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	if !data.Ids.IsNull() {
		var ids = make([]string, len(data.Ids.Elements()))
		resp.Diagnostics.Append(data.Ids.ElementsAs(ctx, &ids, false)...)
		if resp.Diagnostics.HasError() {
			return
		}

		workTypeModels := make(map[string]workTypeResourceModel, len(ids))

		for _, id := range ids {
			issueType, apiResp, err := d.client.Issue.Type.Get(ctx, id)
			if err != nil {
				resp.Diagnostics.AddError("Error reading resource", fmt.Sprintf("Error:\n%s", err.Error()))
				return
			}

			if apiResp.StatusCode != 200 {
				resp.Diagnostics.AddError("Error reading resource", fmt.Sprintf("Error:\n%s", apiResp.Body))
				return
			}
			workTypeModels[strings.ToLower(issueType.Name)] = workTypeResourceModel{
				Id:             types.StringValue(issueType.ID),
				Name:           types.StringValue(issueType.Name),
				HierarchyLevel: types.Int32Value(int32(issueType.HierarchyLevel)),
				Subtask:        types.BoolValue(issueType.Subtask),
				AvatarID:       types.Int64Value(int64(issueType.AvatarID)),
				IconURL:        types.StringValue(issueType.IconURL),
			}
		}

		var tempDiag diag.Diagnostics

		data.WorkTypes, tempDiag = types.MapValueFrom(ctx, types.ObjectType{AttrTypes: emptyTypeModel.AttributeTypes()}, workTypeModels)

		resp.Diagnostics.Append(tempDiag...)
		if resp.Diagnostics.HasError() {
			return
		}

	} else {
		issueTypes, apiResp, err := d.client.Issue.Type.Gets(ctx)

		if err != nil {
			resp.Diagnostics.AddError("Error reading resource", fmt.Sprintf("Error:\n%s", err.Error()))
			return
		}

		if apiResp.StatusCode != 200 {
			resp.Diagnostics.AddError("Error reading resource", fmt.Sprintf("Error:\n%s", apiResp.Body))
			return
		}

		if len(issueTypes) > 0 {

			if !data.Names.IsNull() {
				var names = make([]string, len(data.Names.Elements()))
				resp.Diagnostics.Append(data.Names.ElementsAs(ctx, &names, false)...)
				if resp.Diagnostics.HasError() {
					return
				}
				// Filter issueTypes by name
				filteredIssueTypes := slices.DeleteFunc(issueTypes, func(issueType *models.IssueTypeScheme) bool {
					return !slices.Contains(names, issueType.Name)
				})

				// Replace the original slice with the filtered one
				issueTypes = filteredIssueTypes
			}

			workTypeModels := make(map[string]workTypeResourceModel, len(issueTypes))

			for _, issueType := range issueTypes {
				workTypeModels[strings.ToLower(issueType.Name)] = workTypeResourceModel{
					Id:             types.StringValue(issueType.ID),
					Name:           types.StringValue(issueType.Name),
					HierarchyLevel: types.Int32Value(int32(issueType.HierarchyLevel)),
					Subtask:        types.BoolValue(issueType.Subtask),
					AvatarID:       types.Int64Value(int64(issueType.AvatarID)),
					IconURL:        types.StringValue(issueType.IconURL),
				}
			}

			var tempDiag diag.Diagnostics
			data.WorkTypes, tempDiag = types.MapValueFrom(ctx, types.ObjectType{AttrTypes: emptyTypeModel.AttributeTypes()}, workTypeModels)
			resp.Diagnostics.Append(tempDiag...)
			if resp.Diagnostics.HasError() {
				return
			}
		}
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
